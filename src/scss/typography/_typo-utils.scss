// main FN for fetching nested map data
@function get-type-value($config, $mapKey, $name) {
    @return map-get(map-get($config, $mapKey), $name);
}
  
// Fetches the font size for a level inside a typography config.
@function font-size($config, $mapKey) {
    @return get-type-value($config, $mapKey, font-size);
}

// Fetches the line height for a level inside a typography config.
@function line-height($config, $mapKey) {
    @return get-type-value($config, $mapKey, line-height);
}

// Fetches the font weight for a level inside a typography config.
@function font-weight($config, $mapKey) {
    @return get-type-value($config, $mapKey, font-weight);
}

// Fetches the letter spacing for a level inside a typography config.
@function letter-spacing($config, $mapKey) {
    @return get-type-value($config, $mapKey, letter-spacing);
}

// Fetches the font-family from a typography config and removes the quotes around it.
@function font-family($config, $mapKey: null) {
    $font-family: map-get($config, font-family);

    @if $mapKey != null {
        $font-family: get-type-value($config, $mapKey, font-family);
    }

    // Guard against unquoting non-string values, because it's deprecated.
    @return if(type-of($font-family) == string, unquote($font-family), $font-family);
}
  
// Outputs the shorthand `font` CSS property, based on a set of typography values. Falls back to
// the individual properties if a value that isn't allowed in the shorthand is passed in.
@mixin typography-font-shorthand($font-size, $font-weight, $line-height, $font-family) {
    // If any of the values are set to `inherit`, we can't use the shorthand
    // so we fall back to passing in the individual properties.
    @if ($font-size == inherit or
            $font-weight == inherit or
            $line-height == inherit or
            $font-family == inherit or
            $font-size == null or
            $font-weight == null or
            $line-height == null or
            $font-family == null) {

        font-size: $font-size;
        font-weight: $font-weight;
        line-height: $line-height;
        font-family: $font-family;
    }
    @else {
        // Otherwise use the shorthand `font`, because it's the least amount of bytes. Note
        // that we need to use interpolation for `font-size/line-height` in order to prevent
        // Sass from dividing the two values.
        font: $font-weight #{$font-size}/#{$line-height} $font-family;
    }
}

// Converts a typography level into CSS styles.
@mixin typography-level-to-styles($config, $mapKey) {
    $font-size: font-size($config, $mapKey);
    $font-weight: font-weight($config, $mapKey);
    $line-height: line-height($config, $mapKey);
    $font-family: font-family($config, $mapKey);

    @include typography-font-shorthand($font-size, $font-weight, $line-height, $font-family);
    letter-spacing: letter-spacing($config, $mapKey);
}
  