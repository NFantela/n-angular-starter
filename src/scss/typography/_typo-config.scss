@import 'typo-utils';

// Represents a typography level
@function typography-level(
  $font-size,
  $line-height: $font-size,
  $font-weight: 400,
  $font-family: null,
  $letter-spacing: null) {

  @return (
    font-size: $font-size,
    line-height: $line-height,
    font-weight: $font-weight,
    font-family: $font-family,
    letter-spacing: $letter-spacing
  );
}

// creates config with intiial values if none are provided
@function get-typography-config(
  $font-family:   'Roboto, "Helvetica Neue", sans-serif',
  $display-4:     typography-level(6.3em, 6.3em, 300, $letter-spacing: -0.05em),
  $display-3:     typography-level(3.3em, 3.3em, 400, $letter-spacing: -0.02em),
  $display-2:     typography-level(2.6em, 3em, 400, $letter-spacing: -0.005em),
  $display-1:     typography-level(2.1em, 2.5em, 400),
  $headline:      typography-level(1.5em, 2em, 400),
  $title:         typography-level(1.25em, 2em, 500),
  $subheading-2:  typography-level(1em, 1.75em, 400),
  $subheading-1:  typography-level(0.93em, 1.5em, 400),
  $body-2:        typography-level(0.87em, 1.5em, 500),
  $body-1:        typography-level(0.87em, 1.25em, 400),
  $caption:       typography-level(0.75em, 1.25em, 400),
  $button:        typography-level(0.87em, 0.87em, 500),
  // Line-height must be unit-less fraction of the font-size.
  $input:         typography-level(inherit, 1.125, 400)
) {

  // Declare an initial map with all of the levels.
  $config: (
    display-4:      $display-4,
    display-3:      $display-3,
    display-2:      $display-2,
    display-1:      $display-1,
    headline:       $headline,
    title:          $title,
    subheading-2:   $subheading-2,
    subheading-1:   $subheading-1,
    body-2:         $body-2,
    body-1:         $body-1,
    caption:        $caption,
    button:         $button,
    input:          $input,
  );

  // Loop through the levels and set the `font-family` of the ones that don't have one to the base.
  // Note that Sass can't modify maps in place, which means that we need to merge and re-assign.
  @each $key, $level in $config {
    @if map-get($level, font-family) == null {
      $new-level: map-merge($level, (font-family: $font-family));
      $config: map-merge($config, ($key: $new-level));
    }
  }

  // Add the base font family to the config.
  @return map-merge($config, (font-family: $font-family));
}

// Adds the base typography styles, based on a config.
// typography-level-to-styles produces e.g. font: $font-weight #{$font-size}/#{$line-height} $font-family;
@mixin create-base-typography($typoConfig, $selector: '.demo-typography') {
    // default styles
    :root{
      font-size: 16px;
    }
    body {
      font-family: get-font-family($typoConfig);
    }
    // specufic classes
    .demo-h1, .demo-headline, #{$selector} h1 {
      @include typography-level-to-styles($typoConfig, headline);
      margin: 0 0 16px;
    }
  
    .demo-h2, .demo-title, #{$selector} h2 {
      @include typography-level-to-styles($typoConfig, title);
      margin: 0 0 16px;
    }
  
    .demo-h3, .demo-subheading-2, #{$selector} h3 {
      @include typography-level-to-styles($typoConfig, subheading-2);
      margin: 0 0 16px;
    }
  
    .demo-h4, .demo-subheading-1, #{$selector} h4 {
      @include typography-level-to-styles($typoConfig, subheading-1);
      margin: 0 0 16px;
    }
  
    // Note: the spec doesn't have anything that would correspond to h5 and h6, but we add these for
    // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em
    // and h6 at 0.67em.
    .demo-h5, #{$selector} h5 {
      @include typography-font-shorthand(
         // calc is used here to support css variables
        calc(#{get-font-size($typoConfig, body-1)} * 0.83),
        get-font-weight($typoConfig, body-1),
        get-line-height($typoConfig, body-1),
        get-font-family($typoConfig, body-1)
      );
  
      margin: 0 0 12px;
    }
  
    .demo-h6, #{$selector} h6 {
      @include typography-font-shorthand(
         // calc is used here to support css variables
        calc(#{get-font-size($typoConfig, body-1)} * 0.67),
        get-font-weight($typoConfig, body-1),
        get-line-height($typoConfig, body-1),
        get-font-family($typoConfig, body-1)
      );
  
      margin: 0 0 12px;
    }
  
    .demo-body-strong, .demo-body-2 {
      @include typography-level-to-styles($typoConfig, body-2);
    }
  
    .demo-body, .demo-body-1, #{$selector} {
      @include typography-level-to-styles($typoConfig, body-1);
  
      p {
        margin: 0 0 12px;
      }
    }
  
    .demo-small, .demo-caption {
      @include typography-level-to-styles($typoConfig, caption);
    }
  
    .demo-display-4, #{$selector} .demo-display-4 {
      @include typography-level-to-styles($typoConfig, display-4);
      margin: 0 0 56px;
    }
  
    .demo-display-3, #{$selector} .demo-display-3 {
      @include typography-level-to-styles($typoConfig, display-3);
      margin: 0 0 64px;
    }
  
    .demo-display-2, #{$selector} .demo-display-2 {
      @include typography-level-to-styles($typoConfig, display-2);
      margin: 0 0 64px;
    }
  
    .demo-display-1, #{$selector} .demo-display-1 {
      @include typography-level-to-styles($typoConfig, display-1);
      margin: 0 0 64px;
    }
}
  